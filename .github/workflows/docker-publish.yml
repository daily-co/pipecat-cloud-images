name: Docker Build and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  find-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.set-images.outputs.images }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - id: get-version
        run: |
          VERSION=$(cat VERSION)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format in VERSION file"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - id: set-images
        run: |
          IMAGES=$(find starters -name Dockerfile -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "images=$IMAGES" >> $GITHUB_OUTPUT
  build-base:
    runs-on: ubuntu-latest
    name: Build Base
    needs: find-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dailyco/pipecat-base
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.find-images.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./pipecat-base
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-starters:
    needs:
      - find-images
      - build-base
    strategy:
      matrix:
        image: ${{ fromJson(needs.find-images.outputs.images) }}
    runs-on: ubuntu-latest
    name: Build ${{ matrix.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create image name
        id: createImageName
        run: |
          IMAGE_LOCATION=${{ matrix.image }}
          IMAGE_NAME=$(echo ${IMAGE_LOCATION} | tr '/' '-')
          echo "imageName=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dailyco/${{ steps.createImageName.outputs.imageName }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.find-images.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.image }}
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
