name: Docker Build and Push

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  find-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.set-images.outputs.images }}
      base-version: ${{ steps.get-versions.outputs.base-version }}
      python-versions: ${{ steps.get-versions.outputs.python-versions }}
      default-python: ${{ steps.get-versions.outputs.default-python }}
    steps:
      - uses: actions/checkout@v4

      - id: get-versions
        run: |
          BASE_VERSION=$(yq '.base.version' versions.yaml)
          PYTHON_VERSIONS=$(yq '.base.python_versions | @json' versions.yaml)
          DEFAULT_PYTHON=$(yq '.base.default_python' versions.yaml)

          if ! [[ $BASE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid base version format in versions.yaml"
            exit 1
          fi

          echo "base-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "python-versions=$PYTHON_VERSIONS" >> $GITHUB_OUTPUT
          echo "default-python=$DEFAULT_PYTHON" >> $GITHUB_OUTPUT

      - id: set-images
        run: |
          IMAGES=$(find pipecat-starters -name Dockerfile -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "images=$IMAGES" >> $GITHUB_OUTPUT
  build-base:
    runs-on: ubuntu-24.04-arm
    name: Build Base Images
    needs: find-images
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.find-images.outputs.python-versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dailyco/pipecat-base
          tags: |
            type=raw,value=latest-py${{ matrix.python-version }}
            type=raw,value=${{ needs.find-images.outputs.base-version }}-py${{ matrix.python-version }}
            type=raw,value=latest,enable=${{ matrix.python-version == needs.find-images.outputs.default-python }}
            type=raw,value=${{ needs.find-images.outputs.base-version }},enable=${{ matrix.python-version == needs.find-images.outputs.default-python }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./pipecat-base
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.find-images.outputs.base-version }}
            PYTHON_VERSION=${{ matrix.python-version }}

  build-starters:
    needs:
      - find-images
      - build-base
    strategy:
      matrix:
        image: ${{ fromJson(needs.find-images.outputs.images) }}
    runs-on: ubuntu-24.04-arm
    name: Build ${{ matrix.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get starter version
        id: get-starter-version
        run: |
          IMAGE_LOCATION=${{ matrix.image }}
          STARTER_NAME=$(basename ${IMAGE_LOCATION})
          STARTER_VERSION=$(yq ".starters.${STARTER_NAME}" versions.yaml)

          if [ "$STARTER_VERSION" = "null" ]; then
            echo "Error: No version found for starter '${STARTER_NAME}' in versions.yaml"
            exit 1
          fi

          if ! [[ $STARTER_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format for starter '${STARTER_NAME}' in versions.yaml: $STARTER_VERSION"
            exit 1
          fi

          echo "starter-version=$STARTER_VERSION" >> $GITHUB_OUTPUT

      - name: Create image name
        id: createImageName
        run: |
          IMAGE_LOCATION=${{ matrix.image }}
          IMAGE_NAME=$(echo ${IMAGE_LOCATION} | tr '/' '-')
          echo "imageName=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dailyco/${{ steps.createImageName.outputs.imageName }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get-starter-version.outputs.starter-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.image }}
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
